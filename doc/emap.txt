*emap.txt* *emap*

Author:
  tyru <tyru.exe@gmail.com>
Version: 0.0.0
License:
NEW BSD LICENSE {{{
  Copyright (c) 2010, tyru
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

      * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
      * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
      * Neither the name of the tyru nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
}}}

==============================================================================
CONTENTS						*emap-contents*

Introduction		|emap-introduction|
Interface			|emap-interface|
  Keymappings		|emap-keymappings|
  Variables			|emap-variables|
  Commands			|emap-commands|
  Functions			|emap-functions|
Pragma				|emap-pragma|
  What is pragma	|emap-pragma-introduction|
  Avaialabe pragmas	|emap-pragma-list|
    ignore-spaces	|emap-pragma-ignore-spaces|
    all				|emap-pragma-all|
Key notation		|emap-key-notation|
TODO				|emap-todo|
Changelog			|emap-changelog|


==============================================================================
INTRODUCTION						*emap-introduction* {{{
>
	call emap#load()
	call emap#set_sid_from_sfile(expand('<sfile>'))

	" or
	function s:SID()    " :help <SID>
	  return matchstr(expand('<sfile>'), '<SNR>\zs\d\+\ze_SID$')
	endfun
	call emap#load()
	call emap#set_sid(s:SID())


	DefMap [nvo] -noremap clipboard "+
	DefMap [nvo] -noremap primary   "*
	DefMap [nvo] -noremap blackhole "_
	DefMap [nvo] -noremap delete-char x
	DefMap [nvo] -noremap delete* d


	" `SetPragmas ignores-spaces` ignores whitespaces in rhs.
	" See |emap-pragma| for the details.
	SetPragmas ignore-spaces

	" paste to clipboard
	Map [nvo] -noremap <Leader>y     <clipboard> y
	Map [nvo] -noremap <SID>[comma]y <primary>   y
	Map [nvo] -noremap <Leader>d     <clipboard> d
	Map [nvo] -noremap <SID>[comma]d <primary>   d

	" do not destroy noname register.
	Map [nvo] x        <blackhole> <delete-char>
	Map [nvo] <Space>d <blackhole> <delete*>

	Map [nvo] -noremap callit :<C-u>call<Space><SID>my_func()<CR>

	UnsetPragmas ignore-spaces

	Map [nvo] -noremap callit :<C-u>call <SID>my_func()<CR>


	DefMap [i] -noremap -expr bs-ctrl-] getline('.')[col('.') - 2] ==# "\<C-]>" ? "\<BS>" : ''
	DefMap [c] -noremap -expr bs-ctrl-] getcmdline()[getcmdpos() - 2] ==# "\<C-]>" ? "\<BS>" : ''
	Map   [ic]                <C-]>     <C-]><bs-ctrl-]>


	" `-` seems like option. `--` to separate options and lhs.
	Map [n] -noremap    + <C-a>
	Map [n] -noremap -- - <C-x>
<
}}}
==============================================================================
INTERFACE				*emap-interface* {{{
------------------------------------------------------------------------------
KEYMAPPINGS					*emap-keymappings* {{{

This plugin maps keymappings :)

}}}
------------------------------------------------------------------------------
VARIABLES					*emap-variables* {{{

Currently no variables.

}}}
------------------------------------------------------------------------------
COMMANDS					*emap-commands* {{{

<modes> are wrapped with "[...]".

						*:EmDefMacroMap*
:EmDefMacroMap <modes> <options> <lhs> <rhs>

						*:EmDefMacroUnmap*
:EmDefMacroUnmap <modes> <options> <lhs>

						*:EmDefMap*
:EmDefMap <modes> <options> <lhs> <rhs>

						*:EmDefUnmap*
:EmDefUnmap <modes> <options> <lhs>

						*:EmMap*
:EmMap <modes> <options> <lhs> <rhs>

						*:EmUnmap*
:EmUnmap <modes> <options> <lhs>

						*:EmSetPragmas*
:EmSetPragmas <pragma> [<pragma> ...]
	This is wrapper ex command for |emap#set_pragmas()|.
	See |emap-pragma| about pragma.

						*:EmUnsetPragmas*
:EmUnsetPragmas <pragma> [<pragma> ...]
	This is wrapper ex command for |emap#unset_pragmas()|.
	See |emap-pragma| about pragma.

}}}
------------------------------------------------------------------------------
FUNCTIONS				*emap-functions* {{{

emap#load({excmdnames})						*emap#load()*
	This function calls at once:
	* |emap#define_ex_commands()|
	* |emap#init_map_info()|

emap#define_ex_commands({excmdnames})						*emap#define_ex_commands()*
	Define ex commands.
	Ex commands' names can be changed like: >
	call emap#load({
	\   'EmMap': 'Map',
	\   'EmDefMacroMap': 'DefMacroMap',
	\   'EmDefMap': 'DefMap',
	\   'EmSetPragmas': 'SetPragmas',
	\})
	call emap#load('noprefix')    " same as above
<
emap#init_map_info()						*emap#init_map_info()*
	|emap| saves all mappings via |emap|,
	this function clears the mappings info.

emap#available_pragmas()		*emap#available_pragmas()* |emap-pragma|
	Returns all available pragmas.

emap#group_pragmas()			*emap#group_pragmas()* |emap-pragma|
	Returns all group pragmas.

emap#set_pragmas({pragmas})		*emap#set_pragmas()* |emap-pragma|
	Enable some pragmas.
	You can use group pragmas and non-group pragmas.

emap#unset_pragmas({pragmas})	*emap#unset_pragmas()* |emap-pragma|
	Disable some pragmas.
	You can use group pragmas and non-group pragmas.

emap#set_sid_from_sfile({sfile})	*emap#set_sid_from_sfile()* |<SID>|
emap#set_sid({sid})
	Set script id.
	This is required for converting <SID> to <SNR>
	in your .vimrc.

emap#compile_map({mode}, {map})		*emap#compile_map()*
	Compile |emap-key-notation| to Vim's |key-notation|.
	namely, |:map|'s arguments.

}}}
}}}
==============================================================================
PRAGMA						*emap-pragma* {{{
------------------------------------------------------------------------------
WHAT IS PRAGMA				*emap-what-is-pragma* *emap-pragma-introduction* {{{
`Pragma` is to change command's behavior.
>
	call emap#load()
	call emap#set_sid_from_sfile(expand('<sfile>'))

	SetPragmas ignore-spaces

	" do not destroy noname register.
	Map [nvo] x        <blackhole> <delete-char>
	Map [nvo] <Space>d <blackhole> <delete*>
<
Comment out |emap#set_pragmas()| and see the difference of `:map x`.
}}}
------------------------------------------------------------------------------
AVAIALABE PRAGMAS			*emap-available-pragmas* *emap-pragma-list* {{{

ignore-spaces				*emap-pragma-ignore-spaces*
	Ignore all whitespaces in rhs.
	If you want to include spaces, Use <Space>.

all							*emap-pragma-all*
	This means all pragmas. >
	SetPragmas all
<	means `Set all available pragmas`.
	To get all available pragmas, Use |emap#available_pragmas()|.

}}}
}}}
==============================================================================
KEY NOTATION				*emap-key-notation* {{{

(TODO)

}}}
==============================================================================
TODO						*emap-todo* {{{

- Listing mappings by `Map [...] -options lhs`.
- |:EmDefMapClear|
- |:EmDefMacroMapClear|
- Autoload functions correspond to ex commands.
- Show warnings when <user-defined-map> is not defined, nor built-in keys.
- Passing "-remap" to |:EmDefMacroMap| doesn't make sense.
  should show the warning.
- autoload functions for each ex command.


More...
--------

- |:EmDefMap| defines mapping to take arguments.
>
    DefMap [n] -nargs=1 yank y <args>
    " This is converted to `y $`.
    Map    [n]          <yank $>
<
- `leader-macro` pragma
- |:EmDefOwnMap|
>
    DefOwnMap FnMap Map [<modes>] <options> <lhs> :<C-u>call <rhs><CR>
    DefOwnMap ObjMap [<mode n>vo] <options> <lhs> <rhs>

    DefOwnMap -function FnMap <SID>cmd_fnmap
    function! s:cmd_fnmap(map_info)
        let ret = []
        for m in split(map_info.modes, '\zs')
            call add(ret,
            \     s:get_map_excmd(
            \         m,
            \         map_info.options,
            \         map_info.lhs,
            \         map_info.rhs))
        endfor
        return ret
    endfunction

    DefOwnMap ArpeggioMap <execute <let-each-mode [m] Arpeggio <get-map-ex <m>> <lhs> <rhs>>>

    " `-eval-function` is too long.
    DefOwnMap -eval-function ArpeggioMap <SID>cmd_arpeggio()
    function! s:cmd_arpeggio()
        <execute <let-each-mode [m] Arpeggio <get-map-ex <m>> <lhs> <rhs>>>
    endfunction
<
- Plugin feature
  - Plugin can change
    - modes
    - options
    - lhs
    - rhs
  - Plugin which I'm thinking
    - emap-repeat
    - emap-candidates
    - emap-each
    - emap-arpeggio
    - emap-submode
    - emap-altercmd
    - ...

}}}
==============================================================================
CHANGELOG						*emap-changelog* {{{

See git-log :p

}}}
==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl:noet:fdm=marker:fen
